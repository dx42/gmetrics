# Resource Bundle for GMetrics

# Base HTML Report
basicHtmlReport.titlePrefix=GMetrics Report
basicHtmlReport.reportTimestamp.label=Report timestamp:
basicHtmlReport.metricResults.title=Metric Results
basicHtmlReport.metricResults.notApplicable=N/A
basicHtmlReport.metricDescriptions.title=Metric Descriptions
basicHtmlReport.metricResults.nameHeading=Package/Class/Method
basicHtmlReport.metricDescriptions.nameHeading=Metric Name
basicHtmlReport.metricDescriptions.descriptionHeading=Description

# Single-Series HTML Report
singleSeriesHtmlReport.reportTimestamp.label = Report timestamp:
singleSeriesHtmlReport.packageHeading = Package
singleSeriesHtmlReport.classHeading = Class
singleSeriesHtmlReport.methodHeading = Method

#-----------------------------------------------------------------------------------------
# Metrics
#-----------------------------------------------------------------------------------------
ABC.description.html=Measures size and complexity of source code. See the <a href='http://c2.com/cgi/wiki?AbcMetric'>Wikipedia entry for the ABC metric</a>.
ABC.description=Measures size and complexity of source code. See http://c2.com/cgi/wiki?AbcMetric
ABC.total=ABC (total)
ABC.average=ABC (average)

ClassCount.description.html=Counts the number classes within each package.
ClassCount.description=Counts the number classes within each package.
ClassCount.total=Classes (total)
ClassCount.average=Classes (average)

ClassLineCount.description.html=Counts the number of lines in each class or interface.
ClassLineCount.description=Counts the number of lines in each class or interface.
ClassLineCount.total=Class Lines (total)
ClassLineCount.average=Class Lines (average)

CoberturaBranchCoverage.description.html=Measures code coverage of branches (conditionals) from a <em>Cobertura</em> XML file.
CoberturaBranchCoverage.description=Measures code coverage of branches (conditionals) from a Cobertura XML file.
CoberturaBranchCoverage.total=Branch Coverage (total)
CoberturaBranchCoverage.average=Branch Coverage (average)
CoberturaBranchCoverage.formatter=org.gmetrics.formatter.PercentageFormatter

CoberturaLineCoverage.description.html=Measures code coverage by line from a <em>Cobertura</em> XML file.
CoberturaLineCoverage.description=Measures code coverage by line from a Cobertura XML file.
CoberturaLineCoverage.total=Line Coverage (total)
CoberturaLineCoverage.average=Line Coverage (average)
CoberturaLineCoverage.formatter=org.gmetrics.formatter.PercentageFormatter

CRAP.description.html=Measures the C.R.A.P. (Change Risk Anti-Patterns) score. It is designed to analyze and predict the amount of effort, pain, and time required to maintain an existing body of code. Given a Java method m, C.R.A.P. for m is calculated as follows: <em>C.R.A.P.(m) = comp(m)^2 * (1 – cov(m)/100)^3 + comp(m)</em>. Where <em>comp(m)</em> is the cyclomatic complexity of method m, and <em>cov(m)</em> is the test code coverage provided by automated tests. See <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=210575">Blog post describing the CRAP metric</a>.
CRAP.description=Measures the C.R.A.P. (Change Risk Anti-Patterns) score. It is designed to analyze and predict the amount of effort, pain, and time required to maintain an existing body of code.  Given a Java method m, C.R.A.P. for m is calculated as follows: C.R.A.P.(m) = comp(m)^2 * (1 – cov(m)/100)^3 + comp(m). Where comp(m) is the cyclomatic complexity of method m, and cov(m) is the test code coverage provided by automated tests. See http://www.artima.com/weblogs/viewpost.jsp?thread=210575.
CRAP.total=CRAP (total)
CRAP.average=CRAP (average)

CyclomaticComplexity.description.html=Measures the (McCabe) <em>Cyclomatic Complexity</em> of source code. See the <a href='http://en.wikipedia.org/wiki/Cyclomatic_complexity'>Wikipedia entry for Cyclomatic Complexity</a>.
CyclomaticComplexity.description=Measures the (McCabe) Cyclomatic Complexity of source code. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.
CyclomaticComplexity.total=Complexity (total)
CyclomaticComplexity.average=Complexity (average)

EfferentCoupling.description.html=Counts the number of other packages that the classes in a package depend upon. (Package-level).
EfferentCoupling.description=Counts the number of other packages that the classes in a package depend upon. (Package-level).
EfferentCoupling.total=Efferent Coupling (total)
EfferentCoupling.average=Efferent Coupling (average)

FieldCount.description.html=Counts the number of fields within each class.
FieldCount.description=Counts the number of fields within each class.
FieldCount.total=Fields (total)
FieldCount.average=Fields (average)

MethodCount.description.html=Counts the number of methods within each class.
MethodCount.description=Counts the number of methods within each class.
MethodCount.total=Methods (total)
MethodCount.average=Methods (average)

MethodLineCount.description.html=Counts the number of lines in each method.
MethodLineCount.description=Counts the number of lines in each method.
MethodLineCount.total=Method Lines (total)
MethodLineCount.average=Method Lines (average)
